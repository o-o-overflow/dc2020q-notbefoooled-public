#!/usr/bin/env sage
from pwn import *
from sage.all import *
import sys

D = 3

def test_safe(E, p, b):
    Eqp = EllipticCurve(Qp(p, 2), [0, b])

    P = E.gens()[0]
    P_Qps = [x for x in Eqp.lift_x(ZZ(P.xy()[0]), all=True) if GF(p)(x.xy()[1]) == P.xy()[1]]
    P_Qp = P_Qps[0]
    if P_Qp * p == Eqp(0):
        return True
    else:
        return False


def find_safe_curve(p):
    for b in xsrange(1, p):
        if b % 10 ** 4 == 0:
            print("Testing..., b = %d" % b)
        E = EllipticCurve(GF(p), [0, b])
        if E.order() == p:
            print("order is satisfied!")
            if test_safe(E, p, b):
                print("Find Safe Anomalous Curve")
                yield (E, b)

def receive_generator(conn):
    conn.recvuntil("generator: (")
    xy = conn.recvline()
    x = int(xy.split(",")[0])
    y = int(xy.split(",")[1][:-2])
    return x, y


def find_prime(lower):
    start = int(sqrt((lower - 1) / D))
    while True:
        p = D * start * (start + 1) + 1
        if p < lower:
            start += 1
        else:
            break

    m = start
    while True:
        p = D * m * (m + 1) + 1
        m += 1
        if is_prime(p):
            yield p


if __name__ == "__main__":
    conn = remote(sys.argv[1], sys.argv[2])
    conn.recvuntil("greater than ", drop=True)
    threshold = int(conn.recvuntil(":", drop=True))
    conn.recvuntil("a = ", drop=True)
    conn.sendline("0")
    for p in find_prime(threshold):
        for E, b in find_safe_curve(p):
            conn.recvuntil("b = ", drop=True)
            conn.sendline("%d" % b)
            conn.recvuntil("p = ", drop=True)
            conn.sendline("%d" % p)
            Gx, Gy = receive_generator(conn)
            G = E(Gx, Gy)
            P = G * 2
            conn.recvuntil("x = ", drop=True)
            conn.sendline("%d" % int(P.xy()[0]))
            conn.recvuntil("y = ", drop=True)
            conn.sendline("%d" % int(P.xy()[1]))
            conn.recvuntil("the answer: ", drop=True)
            flag = conn.recvline()
            print(flag)
            conn.close()
            exit()
